version: '3.8'

services:
  # OpenRMF full stack (using official production images)
  mongodb:
    image: mongo:7.0
    volumes:
      - mongo-data:/data/db
    restart: always
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 10s

  openrmf-keycloak:
    image: jboss/keycloak:23.0.0  # For OpenRMF auth
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: password
    volumes:
      - keycloak-data:/opt/jboss/keycloak/standalone/data
    ports:
      - "8081:8080"
    restart: always

  openrmf-web:
    build: ./openrmf
    depends_on:
      mongodb:
        condition: service_healthy
      openrmf-keycloak:
        condition: service_started
    environment:
      MONGO_URI: mongodb://mongodb:27017/openrmf
      JWTAUTHORITY: http://openrmf-keycloak:8080/auth/realms/openrmf
    ports:
      - "8080:8080"
    restart: always
    volumes:
      - ./openrmf/nginx.conf:/etc/nginx/nginx.conf

  # Add other OpenRMF APIs (production images)
  openrmf-api-read:
    image: cingulara/openrmf-api-read:1.13.00
    depends_on:
      - mongodb
    environment:
      MONGO_URI: mongodb://mongodb:27017/openrmf
    restart: always

  # Similarly add openrmf-api-scoring, openrmf-api-template, etc. (full list from docs: audit, controls, report, etc.)

  postgres:
    image: postgres:16
    environment:
      POSTGRES_USER: openriskops
      POSTGRES_PASSWORD: password
      POSTGRES_DB: openriskops
    volumes:
      - pg-data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U openriskops"]
      interval: 10s

  redis:
    image: redis:7
    restart: always

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.1
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - es-data:/usr/share/elasticsearch/data
    restart: always

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio-data:/data
    ports:
      - "9002:9000"
      - "9003:9001"
    restart: always

  thehive:
    build: ./thehive
    depends_on:
      postgres:
        condition: service_healthy
      cortex:
        condition: service_started
      elasticsearch:
        condition: service_started
    ports:
      - "9000:9000"
    restart: always
    environment:
      - SCALA_LOG_LEVEL=INFO

  cortex:
    build: ./cortex
    depends_on:
      - elasticsearch
    ports:
      - "9001:9001"
    restart: always

  opencti:
    build: ./opencti
    depends_on:
      - redis
      - elasticsearch
      - minio
    ports:
      - "8082:8080"
    restart: always
    environment:
      - APP__PORT=8080

  sync-engine:
    build: ./sync-engine
    depends_on:
      - openrmf-web
      - thehive
      - cortex
      - opencti
    volumes:
      - ./sync-engine:/app
    restart: always

  dashboard-backend:
    build: ./dashboard/backend
    ports:
      - "8000:8000"
    depends_on:
      - sync-engine
    restart: always

  dashboard-frontend:
    build: ./dashboard/frontend
    ports:
      - "3000:3000"
    depends_on:
      - dashboard-backend
    restart: always

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    restart: always

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    restart: always

volumes:
  mongo-data:
  pg-data:
  es-data:
  minio-data:
  keycloak-data: